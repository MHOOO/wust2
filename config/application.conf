stage = ${?WUST_STAGE}

stages.prod {
    auth {
        enableImplicit = true
        tokenLifetime = 86400
        secret = ${?WUST_AUTH_SECRET}
    }

    email {
        fromAddress = ${?WUST_EMAIL_ADDRESS}
        smtp {
            username = ${?WUST_SMTP_USER}
            password = ${?WUST_SMTP_PASS}
            endpoint = ${?WUST_SMTP_ENDPOINT}
        }
    }

    db {
        host = ${?POSTGRES_HOSTNAME}
        port = 5432
        database = ${?POSTGRES_DB}
        user = ${?POSTGRES_USER}
        password = ${?POSTGRES_PASSWORD}
        //TODO: what about these? just increased because we got error messages of exhausted queues
        poolMaxQueueSize = 16
        poolMaxObjects = 16
        poolMaxIdle = 999999999
        poolValidationInterval = 10000
    }
}

stages.dev = ${stages.prod}
stages.dev {
    auth {
        secret = secret
    }

    db {
        host = localhost
        port = ${?POSTGRES_PORT}
        database = wust
        user = wust
        password = test
    }
}

integrationTestDb {
    dataSourceClassName = org.postgresql.ds.PGSimpleDataSource
    dataSource {
        serverName = ${?stages.dev.db.host}
        portNumber = ${?stages.dev.db.port}
        databaseName = postgres
        user = ${?stages.dev.db.user}
        password = ${?stages.dev.db.password}
    }
    connectionTimeout = 30000
}

akka {
    log-dead-letters = 10
    log-dead-letters-during-shutdown = on
    //event-handlers = ["akka.event.slf4j.Slf4jEventHandler"]
    //loglevel = "INFO"
    //logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

    http {
        // corresponds to nginx read timeout
        server.idle-timeout = 120 s
    }
}
